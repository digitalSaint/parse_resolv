#--
# DO NOT MODIFY!!!!
# This file is automatically generated by rex 1.0.5
# from lexical definition file "test_resolv.rex".
#++

require 'racc/parser'
class Resolv < Racc::Parser
  require 'strscan'

  class ScanError < StandardError ; end

  attr_reader   :lineno
  attr_reader   :filename
  attr_accessor :state

  def scan_setup(str)
    @ss = StringScanner.new(str)
    @lineno =  1
    @state  = nil
  end

  def action
    yield
  end

  def scan_str(str)
    scan_setup(str)
    do_parse
  end
  alias :scan :scan_str

  def load_file( filename )
    @filename = filename
    open(filename, "r") do |f|
      scan_setup(f.read)
    end
  end

  def scan_file( filename )
    load_file(filename)
    do_parse
  end


  def next_token
    return if @ss.eos?
    
    # skips empty actions
    until token = _next_token or @ss.eos?; end
    token
  end

  def _next_token
    text = @ss.peek(1)
    @lineno  +=  1  if text == "\n"
    token = case @state
    when nil
      case
      when (text = @ss.scan(/^(domain)\s+(([a-zA-Z0-9]|[a-zA-Z0-9][a-zA-Z0-9\-]*[a-zA-Z0-9])\.)*([A-Za-z0-9]|[A-Za-z0-9][A-Za-z0-9\-]*[A-Za-z0-9])$/))
         action { @domain = text.split(" ")[1] }

      when (text = @ss.scan(/^(search)\s+((([a-zA-Z0-9]|[a-zA-Z0-9][a-zA-Z0-9\-]*[a-zA-Z0-9])\.)*([A-Za-z0-9]|[A-Za-z0-9][A-Za-z0-9\-]*[A-Za-z0-9])\s+?)+$/))
         action { @search = text.split(" ")[1..-1] }

      when (text = @ss.scan(/^(nameserver)\s+(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])$/))
         action { @nameservers << text.split(" ")[1] }

      when (text = @ss.scan(/^(options)\s+.*$/))
         action { @options << text.split(" ")[1] }

      when (text = @ss.scan(/^(\s*#.*|#.*)$/))
        ;

      when (text = @ss.scan(/\s+/))
        ;

      else
        text = @ss.string[@ss.pos .. -1]
        raise  ScanError, "can not match: '" + text + "'"
      end  # if

    else
      raise  ScanError, "undefined state: '" + state.to_s + "'"
    end  # case state
    token
  end  # def _next_token

  require 'json'
  require 'yaml'
  def initialize_obj
    @nameservers = Array.new
    @domain = ""
    @search = Array.new
    @options = Array.new
  end
  def tokenize(line)
    scan_setup(line)
    tokens = []
    while token = next_token
      tokens << token
    end
    tokens
  end
  def get_resolv
    resolv = Hash.new
    if !@nameservers.empty?
      resolv[:nameservers] = @nameservers
    end
    if !@domain.empty?
      resolv[:domain] = @domain
    end
    if !@search.empty?
      resolv[:search] = @search
    end
    if !@options.empty?
      resolv[:options] = @options
    end
    resolv
  end
  def resolv_yaml
    resolv = Hash.new
    get_resolv.each{|k,v| resolv[k.to_s] =v }
    resolv.to_yaml
  end
  def resolv_json
    get_resolv.to_json
  end
end # class
